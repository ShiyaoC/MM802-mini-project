{"ast":null,"code":"var _jsxFileName = \"/Users/shiyao/Documents/MM/MM802/mini_project/MM802-mini-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport DatePicker from \"./components/DatePicker\";\nimport Menu from './components/Menu';\nimport TopN from './components/TopN';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow, Circle } from \"react-google-maps\";\nimport axios from 'axios';\nimport * as d3 from \"d3\";\nimport { red } from '@material-ui/core/colors';\nimport { count } from 'd3'; // import Map from \"./components/WrappedMap\"\n// d3 bar chart: https://www.youtube.com/watch?v=hOzKr8H_438\n// function Map(data){\n//   return (\n//     console.log(\"map data\",typeof(data.data), data.data),\n//     <GoogleMap defaultZoom={10} defaultCenter={{lat: 53.544388, lng:-113.490929}}>\n//     {data.data.forEach(neighb => {\n//       <Marker\n//         position={{\n//           lat: neighb.Latitude,\n//           lng: neighb.Longitude\n//         }\n//         }\n//       />\n//     })}\n//     </GoogleMap>// set Edmonton as center\n//   ); \n// }\n// var data = {\"Month\":{\"0\":1,\"1\":2,\"2\":3,\"3\":4,\"4\":5,\"5\":6,\"6\":7,\"7\":8,\"8\":9,\"9\":10,\"10\":11,\"11\":12},\"count\":{\"0\":1137,\"1\":918,\"2\":977,\"3\":1146,\"4\":1360,\"5\":1357,\"6\":1295,\"7\":1149,\"8\":1083,\"9\":1213,\"10\":1065,\"11\":973}};\n// const WrappedMap = (data) => {\n//   return(\n//     withScriptjs(withGoogleMap(Map(data)))\n//     // console.log(data)\n//   )\n// };\n// interface NeighbourhoodBody {\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [selectedStartDate, setSelectedStartDate] = React.useState(new Date());\n  const [selectedEndDate, setSelectedEndDate] = React.useState(new Date());\n  const [value, setValue] = useState(\"\");\n  const [topN, setTopN] = useState(\"\");\n  const [queryResult, setQueryResult] = useState({});\n  const [testData, setTestData] = useState([{}]); // const [xtry, setxtry] = useState([]);\n  // const [ydata, setydata] = useState([]);\n  // const xtry = [];\n  // for(let i =0; i < Object.keys(data.Month).length;i++){\n  //   xtry.push(data.count[i]);\n  // }\n\n  const handleClick = async () => {\n    let res = await axios.post('http://localhost:3003/api/', {\n      startDate: selectedStartDate,\n      endDate: selectedEndDate,\n      type: value,\n      topn: parseInt(topN)\n    }); // console.log(res)\n\n    setQueryResult(res);\n    console.log(queryResult); // var x=[];\n    // for(let i =0; i < Object.keys(queryResult.data.Month).length;i++){\n    //   x.push(queryResult.data.count[i]);\n    // }\n    // setxtry(x)\n    // setydata(xtry)\n  }; // function displayInfo(neighbourhood){\n  // }\n\n\n  function Map() {\n    console.log(queryResult);\n\n    if (queryResult.data == undefined) {\n      console.log(\"undefined!!!\");\n      return /*#__PURE__*/_jsxDEV(GoogleMap, {\n        defaultZoom: 10,\n        defaultCenter: {\n          lat: 53.544388,\n          lng: -113.490929\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: 10,\n      defaultCenter: {\n        lat: 53.544388,\n        lng: -113.490929\n      },\n      children: [queryResult.data.map(neighbourhood => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: neighbourhood.Latitude,\n          lng: neighbourhood.Longitude\n        } // onClick={() => {\n        //   displayInfo(neighbourhood);\n        // }}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)), queryResult.data.map(neighbourhood => /*#__PURE__*/_jsxDEV(Circle, {\n        defaultCenter: {\n          lat: neighbourhood.Latitude,\n          lng: neighbourhood.Longitude\n        },\n        radius: typeof neighbourhood.ratio == undefined ? neighbourhood.count * 5000 : neighbourhood.ratio * 5000 // onClick={() => {\n        //   displayInfo(neighbourhood);\n        // }}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this);\n  }\n\n  const WrappedMap = withScriptjs(withGoogleMap(Map)); // const[ydata] =useState(xtry);\n  // const svgRef = useRef();\n  // useEffect(() => {\n  //   const width = 800;\n  //   const height = 300;\n  //   const svg = d3.select(svgRef.current)\n  //     .attr('width',width)\n  //     .attr('height', height)\n  //     .style('overflow', 'visible')\n  //     .style('margin-top','75px')\n  //     .style('margin-left','75px');\n  //   svg.append(\"text\")\n  //     .attr(\"transform\", \"translate(100,0)\")\n  //     .attr(\"x\", width/4)\n  //     .attr(\"y\", 50)\n  //     .attr(\"font-size\", \"24px\")\n  //     .text(\"Crime in Neighbourhood by Months\")\n  //   // set scaling\n  //   var xScale = d3.scaleBand().range([0, width]).padding(0.4),\n  //       yScale = d3.scaleLinear().range([height, 0]);\n  //   var g = svg.append(\"g\")\n  //       .attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\");\n  //     xScale.domain(ydata.map((val,i) => i));\n  //     yScale.domain([0, d3.max(ydata)]);\n  //     g.append(\"g\")\n  //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n  //     .call(d3.axisBottom(xScale).tickFormat(function(d){return d+1;}))\n  //     .append(\"text\")\n  //     .attr(\"y\", height - 250)\n  //     .attr(\"x\", width/2)\n  //     .attr(\"text-anchor\", \"end\")\n  //     .attr(\"stroke\", \"black\")\n  //     .text(\"Month\");\n  //     g.append(\"g\")\n  //        .call(d3.axisLeft(yScale).tickFormat(function(d){\n  //            return d;\n  //        })\n  //        .ticks(15))\n  //        .append(\"text\")\n  //        .attr(\"transform\", \"rotate(-90)\")\n  //        .attr(\"x\",0-height/4)\n  //        .attr(\"dy\", \"-5.1em\")\n  //        .attr(\"text-anchor\", \"end\")\n  //        .attr(\"stroke\", \"black\")\n  //        .text(\"Amount of Crime\");\n  //       g.selectAll(\".bar\")\n  //        .data(ydata)\n  //        .enter().append(\"rect\")\n  //        .attr(\"class\", \"bar\")\n  //        .attr(\"x\", (v,i) => xScale(i))\n  //        .attr(\"y\", yScale)\n  //        .attr(\"width\", xScale.bandwidth())\n  //        .attr(\"height\", val => height - yScale(val));\n  //     } ,[]);\n  // send data from backend to frontend\n\n  useEffect(() => {\n    axios.get('http://localhost:3003/members').then(response => {\n      console.log(\"SUCCESS\", response);\n      setTestData(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MM802 mini project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-around\",\n      children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n        setSelectedDate: setSelectedStartDate,\n        selectedDate: selectedStartDate,\n        label: \"Start Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        setSelectedDate: setSelectedEndDate,\n        selectedDate: selectedEndDate,\n        label: \"End Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        setValue: setValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopN, {\n        setTopN: setTopN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleClick,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" retrieve: \", JSON.stringify(queryResult.data), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100vw',\n        height: '100vh',\n        marginTop: 40\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: /*#__PURE__*/_jsxDEV(WrappedMap, {\n          googleMapURL: 'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDviHOxXfm0fv1fbQ3gT0GF81moFw99an4',\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 31\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `400px`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 33\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 27\n          }, this) // test={queryResult.data}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/wIuNJbRSkr6E08vDrw9gvNAOOk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/shiyao/Documents/MM/MM802/mini_project/MM802-mini-project/src/App.js"],"names":["React","useState","useRef","useEffect","DatePicker","Menu","TopN","Grid","makeStyles","Button","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","Circle","axios","d3","red","count","App","selectedStartDate","setSelectedStartDate","Date","selectedEndDate","setSelectedEndDate","value","setValue","topN","setTopN","queryResult","setQueryResult","testData","setTestData","handleClick","res","post","startDate","endDate","type","topn","parseInt","console","log","Map","data","undefined","lat","lng","map","neighbourhood","Latitude","Longitude","ratio","WrappedMap","get","then","response","catch","error","JSON","stringify","width","height","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport DatePicker from \"./components/DatePicker\"\nimport Menu from './components/Menu'\nimport TopN from './components/TopN'\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow, Circle} from \"react-google-maps\";\nimport axios from 'axios'\nimport * as d3 from \"d3\";\nimport { red } from '@material-ui/core/colors';\nimport { count } from 'd3';\n// import Map from \"./components/WrappedMap\"\n// d3 bar chart: https://www.youtube.com/watch?v=hOzKr8H_438\n\n\n// function Map(data){\n//   return (\n//     console.log(\"map data\",typeof(data.data), data.data),\n//     <GoogleMap defaultZoom={10} defaultCenter={{lat: 53.544388, lng:-113.490929}}>\n\n//     {data.data.forEach(neighb => {\n//       <Marker\n//         position={{\n//           lat: neighb.Latitude,\n//           lng: neighb.Longitude\n//         }\n//         }\n//       />\n//     })}\n\n//     </GoogleMap>// set Edmonton as center\n//   ); \n\n// }\n\n// var data = {\"Month\":{\"0\":1,\"1\":2,\"2\":3,\"3\":4,\"4\":5,\"5\":6,\"6\":7,\"7\":8,\"8\":9,\"9\":10,\"10\":11,\"11\":12},\"count\":{\"0\":1137,\"1\":918,\"2\":977,\"3\":1146,\"4\":1360,\"5\":1357,\"6\":1295,\"7\":1149,\"8\":1083,\"9\":1213,\"10\":1065,\"11\":973}};\n\n// const WrappedMap = (data) => {\n//   return(\n//     withScriptjs(withGoogleMap(Map(data)))\n//     // console.log(data)\n//   )\n// };\n// interface NeighbourhoodBody {\n\n// }\n\n\nfunction App() {\n  const [selectedStartDate, setSelectedStartDate] = React.useState(new Date());\n  const [selectedEndDate, setSelectedEndDate] = React.useState(new Date());\n  const [value,setValue] = useState(\"\");\n  const [topN,setTopN] = useState(\"\");\n  const [queryResult, setQueryResult] = useState({});\n\n  const [testData, setTestData] = useState([{}]);\n\n  // const [xtry, setxtry] = useState([]);\n  // const [ydata, setydata] = useState([]);\n\n  // const xtry = [];\n\n  // for(let i =0; i < Object.keys(data.Month).length;i++){\n  //   xtry.push(data.count[i]);\n  // }\n\n  const handleClick = async () =>{\n    let res = await axios.post('http://localhost:3003/api/', {\n      startDate: selectedStartDate,\n      endDate: selectedEndDate,\n      type: value,\n      topn: parseInt(topN)\n    })\n    // console.log(res)\n    setQueryResult(res)\n    console.log(queryResult)\n\n    // var x=[];\n    // for(let i =0; i < Object.keys(queryResult.data.Month).length;i++){\n    //   x.push(queryResult.data.count[i]);\n    // }\n    // setxtry(x)\n    // setydata(xtry)\n\n  }\n\n  // function displayInfo(neighbourhood){\n\n  // }\n\n\n\n  \nfunction Map(){\n  console.log(queryResult)\n  if (queryResult.data == undefined) {\n    console.log(\"undefined!!!\")\n    return (<GoogleMap defaultZoom={10} defaultCenter={{lat: 53.544388, lng:-113.490929}}/>)\n  }\n\n  return (<GoogleMap defaultZoom={10} defaultCenter={{lat: 53.544388, lng:-113.490929}}>\n    {queryResult.data.map(neighbourhood => (\n        <Marker\n          position={{\n            lat: neighbourhood.Latitude,\n            lng: neighbourhood.Longitude\n          }}\n          // onClick={() => {\n          //   displayInfo(neighbourhood);\n          // }}\n        />\n      ))}\n      {queryResult.data.map(neighbourhood => (\n        <Circle\n          defaultCenter={{\n            lat: neighbourhood.Latitude,\n            lng: neighbourhood.Longitude\n          }}\n          radius={typeof neighbourhood.ratio == undefined ? neighbourhood.count*5000 : neighbourhood.ratio*5000}\n          // onClick={() => {\n          //   displayInfo(neighbourhood);\n          // }}\n        />\n      ))}\n\n  </GoogleMap>);\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\n\n  // const[ydata] =useState(xtry);\n  // const svgRef = useRef();\n\n  // useEffect(() => {\n  //   const width = 800;\n  //   const height = 300;\n  //   const svg = d3.select(svgRef.current)\n  //     .attr('width',width)\n  //     .attr('height', height)\n  //     .style('overflow', 'visible')\n  //     .style('margin-top','75px')\n  //     .style('margin-left','75px');\n\n  //   svg.append(\"text\")\n  //     .attr(\"transform\", \"translate(100,0)\")\n  //     .attr(\"x\", width/4)\n  //     .attr(\"y\", 50)\n  //     .attr(\"font-size\", \"24px\")\n  //     .text(\"Crime in Neighbourhood by Months\")\n\n  //   // set scaling\n  //   var xScale = d3.scaleBand().range([0, width]).padding(0.4),\n  //       yScale = d3.scaleLinear().range([height, 0]);\n\n  //   var g = svg.append(\"g\")\n  //       .attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\");\n\n  \n  //     xScale.domain(ydata.map((val,i) => i));\n  //     yScale.domain([0, d3.max(ydata)]);\n\n  //     g.append(\"g\")\n  //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n  //     .call(d3.axisBottom(xScale).tickFormat(function(d){return d+1;}))\n  //     .append(\"text\")\n  //     .attr(\"y\", height - 250)\n  //     .attr(\"x\", width/2)\n  //     .attr(\"text-anchor\", \"end\")\n  //     .attr(\"stroke\", \"black\")\n  //     .text(\"Month\");\n\n  //     g.append(\"g\")\n  //        .call(d3.axisLeft(yScale).tickFormat(function(d){\n  //            return d;\n  //        })\n  //        .ticks(15))\n  //        .append(\"text\")\n  //        .attr(\"transform\", \"rotate(-90)\")\n  //        .attr(\"x\",0-height/4)\n  //        .attr(\"dy\", \"-5.1em\")\n  //        .attr(\"text-anchor\", \"end\")\n  //        .attr(\"stroke\", \"black\")\n  //        .text(\"Amount of Crime\");\n\n  //       g.selectAll(\".bar\")\n  //        .data(ydata)\n  //        .enter().append(\"rect\")\n  //        .attr(\"class\", \"bar\")\n  //        .attr(\"x\", (v,i) => xScale(i))\n  //        .attr(\"y\", yScale)\n  //        .attr(\"width\", xScale.bandwidth())\n  //        .attr(\"height\", val => height - yScale(val));\n  //     } ,[]);\n\n  // send data from backend to frontend\n  useEffect(()=>{\n    axios.get('http://localhost:3003/members').then(response => {\n      console.log(\"SUCCESS\", response)\n      setTestData(response)\n    }).catch(error => {\n      console.log(error)\n    })\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>\n        MM802 mini project\n      </h1>\n\n      <Grid container justifyContent=\"space-around\">\n        <DatePicker \n          setSelectedDate={setSelectedStartDate} \n          selectedDate = {selectedStartDate} \n          label = {\"Start Date\"}/>\n        <DatePicker \n          setSelectedDate={setSelectedEndDate} \n          selectedDate = {selectedEndDate} \n          label = {\"End Date\"}/>\n        <Menu setValue={setValue}/>\n        <TopN setTopN={setTopN}/>\n\n        <Button \n          variant=\"contained\" \n          color=\"primary\" \n          onClick={handleClick}>\n          Search\n        </Button>\n\n      </Grid>\n\n      {/* <svg ref = {svgRef}/>  */}\n{/* \n      { (typeof queryResult.data === 'undefined') ? \n        null :\n        <>\n        {\n          typeof queryResult.data.Month === 'undefined' ?\n          <p>No data for bar chart</p> :\n          <div>\n            <p> showing bar chart </p>\n            <svg ref = {svgRef}/> \n              \n          </div>\n        }\n        </>\n      } */}\n      <p> retrieve: {JSON.stringify(queryResult.data) } </p>\n\n      {/* <p> xtry: {JSON.stringify(xtry)} </p>\n      <p> ydata: {JSON.stringify(ydata)} </p> */}\n\n      <div style = {{width:'100vw',height:'100vh',marginTop: 40}} >\n        <Grid >\n          <WrappedMap \n              googleMapURL = {'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDviHOxXfm0fv1fbQ3gT0GF81moFw99an4'} \n              loadingElement={<div style={{ height: `100%` }} />}\n              containerElement={<div style={{ height: `400px` }} />}\n              mapElement={<div style={{ height: `100%` }} />}\n              // test={queryResult.data}\n            />\n        </Grid>\n      </div>\n\n\n{/*       \n      <p>\n          start date: {selectedStartDate.toLocaleString()}\n      </p>\n      <p>\n          end date: {selectedEndDate.toLocaleString()}\n      </p>\n      <p>\n          you selected crime type: {value}\n      </p>\n      <p>\n          N = {topN}\n      </p> */}\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}